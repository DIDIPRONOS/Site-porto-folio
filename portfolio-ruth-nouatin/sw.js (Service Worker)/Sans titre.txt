/**
 * Service Worker pour le Portfolio de Ruth Nouatin
 * Gestion du cache et fonctionnalit√©s hors-ligne
 */

const CACHE_NAME = 'ruth-portfolio-v1.2.0';
const STATIC_CACHE = 'ruth-static-v1.2.0';
const DYNAMIC_CACHE = 'ruth-dynamic-v1.2.0';

// Ressources √† mettre en cache imm√©diatement
const STATIC_ASSETS = [
    '/',
    '/index.html',
    '/styles.css',
    '/script.js',
    '/manifest.json',
    'https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap',
    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css',
    'https://unpkg.com/aos@2.3.1/dist/aos.js'
];

// Ressources dynamiques (images, etc.)
const DYNAMIC_ASSETS = [
    '/images/',
    '/favicon.ico'
];

// URLs √† exclure du cache
const EXCLUDE_URLS = [
    '/admin',
    '/api',
    'chrome-extension://',
    'moz-extension://'
];

/**
 * Installation du Service Worker
 */
self.addEventListener('install', event => {
    console.log('[SW] Installation du Service Worker');
    
    event.waitUntil(
        Promise.all([
            // Cache des ressources statiques
            caches.open(STATIC_CACHE).then(cache => {
                console.log('[SW] Mise en cache des ressources statiques');
                return cache.addAll(STATIC_ASSETS);
            }),
            
            // Pr√©paration du cache dynamique
            caches.open(DYNAMIC_CACHE).then(cache => {
                console.log('[SW] Pr√©paration du cache dynamique');
                return cache.addAll([]);
            })
        ]).then(() => {
            console.log('[SW] Installation termin√©e');
            // Forcer l'activation imm√©diate
            return self.skipWaiting();
        }).catch(error => {
            console.error('[SW] Erreur lors de l\'installation:', error);
        })
    );
});

/**
 * Activation du Service Worker
 */
self.addEventListener('activate', event => {
    console.log('[SW] Activation du Service Worker');
    
    event.waitUntil(
        Promise.all([
            // Nettoyage des anciens caches
            caches.keys().then(cacheNames => {
                return Promise.all(
                    cacheNames.map(cacheName => {
                        if (cacheName !== STATIC_CACHE && 
                            cacheName !== DYNAMIC_CACHE && 
                            cacheName !== CACHE_NAME) {
                            console.log('[SW] Suppression de l\'ancien cache:', cacheName);
                            return caches.delete(cacheName);
                        }
                    })
                );
            }),
            
            // Prise de contr√¥le imm√©diate
            self.clients.claim()
        ]).then(() => {
            console.log('[SW] Activation termin√©e');
        }).catch(error => {
            console.error('[SW] Erreur lors de l\'activation:', error);
        })
    );
});

/**
 * Interception des requ√™tes r√©seau
 */
self.addEventListener('fetch', event => {
    const requestUrl = event.request.url;
    
    // Ignorer certaines URLs
    if (EXCLUDE_URLS.some(excludeUrl => requestUrl.includes(excludeUrl))) {
        return;
    }
    
    // Strat√©gie Cache First pour les ressources statiques
    if (isStaticAsset(requestUrl)) {
        event.respondWith(cacheFirstStrategy(event.request));
    }
    // Strat√©gie Network First pour le HTML principal
    else if (event.request.headers.get('accept').includes('text/html')) {
        event.respondWith(networkFirstStrategy(event.request));
    }
    // Strat√©gie Stale While Revalidate pour les autres ressources
    else {
        event.respondWith(staleWhileRevalidateStrategy(event.request));
    }
});

/**
 * Strat√©gie Cache First
 * Id√©ale pour les ressources statiques (CSS, JS, fonts, images)
 */
async function cacheFirstStrategy(request) {
    try {
        // Chercher d'abord en cache
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            console.log('[SW] Ressource servie depuis le cache:', request.url);
            return cachedResponse;
        }
        
        // Si pas en cache, r√©cup√©rer depuis le r√©seau
        const networkResponse = await fetch(request);
        
        // Mettre en cache si la r√©ponse est valide
        if (networkResponse.status === 200) {
            const cache = await caches.open(STATIC_CACHE);
            cache.put(request, networkResponse.clone());
            console.log('[SW] Nouvelle ressource mise en cache:', request.url);
        }
        
        return networkResponse;
        
    } catch (error) {
        console.error('[SW] Erreur Cache First:', error);
        
        // Fallback vers une page d'erreur ou ressource par d√©faut
        if (request.destination === 'image') {
            return new Response(
                '<svg xmlns="http://www.w3.org/2000/svg" width="200" height="200" viewBox="0 0 200 200"><rect width="200" height="200" fill="#f0f0f0"/><text x="100" y="100" text-anchor="middle" fill="#999">Image non disponible</text></svg>',
                { headers: { 'Content-Type': 'image/svg+xml' } }
            );
        }
        
        throw error;
    }
}

/**
 * Strat√©gie Network First
 * Id√©ale pour le contenu HTML qui change fr√©quemment
 */
async function networkFirstStrategy(request) {
    try {
        // Essayer d'abord le r√©seau
        const networkResponse = await fetch(request);
        
        // Mettre en cache si succ√®s
        if (networkResponse.status === 200) {
            const cache = await caches.open(DYNAMIC_CACHE);
            cache.put(request, networkResponse.clone());
            console.log('[SW] Contenu HTML mis √† jour en cache:', request.url);
        }
        
        return networkResponse;
        
    } catch (error) {
        console.log('[SW] R√©seau indisponible, tentative cache:', request.url);
        
        // Fallback vers le cache
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            console.log('[SW] Contenu servi depuis le cache (hors ligne):', request.url);
            return cachedResponse;
        }
        
        // Page d'erreur personnalis√©e pour le mode hors ligne
        return new Response(`
            <!DOCTYPE html>
            <html lang="fr">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Hors ligne - Ruth Nouatin</title>
                <style>
                    body {
                        font-family: 'Poppins', sans-serif;
                        background: linear-gradient(135deg, #2c3e50, #3498db);
                        color: white;
                        text-align: center;
                        padding: 50px 20px;
                        margin: 0;
                    }
                    .offline-container {
                        max-width: 600px;
                        margin: 0 auto;
                    }
                    .offline-icon {
                        font-size: 4rem;
                        margin-bottom: 2rem;
                    }
                    h1 { margin-bottom: 1rem; }
                    p { font-size: 1.1rem; margin-bottom: 2rem; }
                    .retry-btn {
                        background: white;
                        color: #2c3e50;
                        padding: 12px 30px;
                        border: none;
                        border-radius: 25px;
                        font-weight: 600;
                        cursor: pointer;
                        font-size: 1rem;
                    }
                </style>
            </head>
            <body>
                <div class="offline-container">
                    <div class="offline-icon">üì°</div>
                    <h1>Vous √™tes hors ligne</h1>
                    <p>Impossible de charger cette page. V√©rifiez votre connexion internet et r√©essayez.</p>
                    <p><strong>Ruth Nouatin</strong><br>
                    Assistante de Direction | Secr√©taire Administrative<br>
                    üìû +229 01 91 55 73 63</p>
                    <button class="retry-btn" onclick="window.location.reload()">
                        R√©essayer
                    </button>
                </div>
            </body>
            </html>
        `, {
            status: 200,
            headers: { 'Content-Type': 'text/html; charset=utf-8' }
        });
    }
}

/**
 * Strat√©gie Stale While Revalidate
 * Id√©ale pour les ressources qui peuvent √™tre mises √† jour en arri√®re-plan
 */
async function staleWhileRevalidateStrategy(request) {
    const cache = await caches.open(DYNAMIC_CACHE);
    const cachedResponse = await cache.match(request);
    
    // R√©cup√©ration en arri√®re-plan
    const fetchPromise = fetch(request).then(networkResponse => {
        if (networkResponse.status === 200) {
            cache.put(request, networkResponse.clone());
            console.log('[SW] Ressource mise √† jour en arri√®re-plan:', request.url);
        }
        return networkResponse;
    }).catch(error => {
        console.log('[SW] √âchec de mise √† jour en arri√®re-plan:', request.url);
        return null;
    });
    
    // Retourner le cache imm√©diatement si disponible, sinon attendre le r√©seau
    return cachedResponse || await fetchPromise;
}

/**
 * V√©rifier si une ressource est statique
 */
function isStaticAsset(url) {
    return STATIC_ASSETS.some(asset => url.includes(asset)) ||
           url.includes('.css') ||
           url.includes('.js') ||
           url.includes('.woff') ||
           url.includes('.woff2') ||
           url.includes('fonts.googleapis.com') ||
           url.includes('cdnjs.cloudflare.com');
}

/**
 * Gestion des messages depuis l'application principale
 */
self.addEventListener('message', event => {
    console.log('[SW] Message re√ßu:', event.data);
    
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
    
    if (event.data && event.data.type === 'GET_VERSION') {
        event.ports[0].postMessage({
            version: CACHE_NAME,
            static: STATIC_CACHE,
            dynamic: DYNAMIC_CACHE
        });
    }
    
    if (event.data && event.data.type === 'CLEAR_CACHE') {
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cacheName => caches.delete(cacheName))
            );
        }).then(() => {
            event.ports[0].postMessage({ success: true });
        });
    }
});

/**
 * Gestion de la synchronisation en arri√®re-plan
 */
self.addEventListener('sync', event => {
    console.log('[SW] Synchronisation en arri√®re-plan:', event.tag);
    
    if (event.tag === 'background-sync') {
        event.waitUntil(doBackgroundSync());
    }
});

/**
 * Synchronisation en arri√®re-plan
 */
async function doBackgroundSync() {
    try {
        console.log('[SW] Ex√©cution de la synchronisation en arri√®re-plan');
        
        // Ici, vous pourriez synchroniser des donn√©es, 
        // envoyer des formulaires en attente, etc.
        
        // Exemple: v√©rifier les mises √† jour du site
        const response = await fetch('/');
        if (response.ok) {
            const cache = await caches.open(DYNAMIC_CACHE);
            await cache.put('/', response);
            console.log('[SW] Site mis √† jour en arri√®re-plan');
        }
        
    } catch (error) {
        console.error('[SW] Erreur lors de la synchronisation:', error);
    }
}

/**
 * Gestion des notifications push (pr√©par√© pour usage futur)
 */
self.addEventListener('push', event => {
    console.log('[SW] Notification push re√ßue:', event);
    
    const options = {
        body: event.data ? event.data.text() : 'Nouvelle notification',
        icon: '/images/icon-192x192.png',
        badge: '/images/badge-72x72.png',
        vibrate: [100, 50, 100],
        data: {
            dateOfArrival: Date.now(),
            primaryKey: '1'
        },
        actions: [
            {
                action: 'explore',
                title: 'Voir le portfolio',
                icon: '/images/checkmark.png'
            },
            {
                action: 'close',
                title: 'Fermer',
                icon: '/images/xmark.png'
            }
        ]
    };
    
    event.waitUntil(
        self.registration.showNotification('Ruth Nouatin - Portfolio', options)
    );
});

/**
 * Gestion des clics sur les notifications
 */
self.addEventListener('notificationclick', event => {
    console.log('[SW] Clic sur notification:', event);
    
    event.notification.close();
    
    if (event.action === 'explore') {
        event.waitUntil(
            clients.openWindow('/')
        );
    }
});

/**
 * Nettoyage p√©riodique du cache
 */
self.addEventListener('periodicsync', event => {
    if (event.tag === 'cache-cleanup') {
        event.waitUntil(cleanupOldCache());
    }
});

/**
 * Nettoyage des anciens √©l√©ments du cache
 */
async function cleanupOldCache() {
    const cache = await caches.open(DYNAMIC_CACHE);
    const requests = await cache.keys();
    const now = Date.now();
    const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 jours
    
    for (const request of requests) {
        const response = await cache.match(request);
        const dateHeader = response.headers.get('date');
        
        if (dateHeader) {
            const age = now - new Date(dateHeader).getTime();
            if (age > maxAge) {
                await cache.delete(request);
                console.log('[SW] Suppression du cache expir√©:', request.url);
            }
        }
    }
}

// Log de d√©marrage
console.log('[SW] Service Worker Ruth Portfolio charg√©');
console.log('[SW] Version:', CACHE_NAME);